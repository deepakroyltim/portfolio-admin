generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String          @id @default(cuid())
  name          String?
  email         String          @unique
  emailVerified DateTime?
  image         String?
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  accounts      Account[]
  Authenticator Authenticator[]
  sessions      Session[]
  Post          Post[]
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Session {
   id          String?  @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
}

model Authenticator {
  credentialID         String  @unique
  userId               String
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?
  user                 User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, credentialID])
}

model Taxonomy {
  id        String         @id @default(cuid())
  name      String
  slug      String         @unique
  metas     TaxonomyMeta[]
  createdAt DateTime       @default(now())
  updatedAt DateTime       @updatedAt
}

model TaxonomyMeta {
  id             String         @id @default(cuid())
  name           String
  slug           String         
  taxonomyId     String
  taxonomy       Taxonomy       @relation(fields: [taxonomyId], references: [id], onDelete: Cascade)
  postTaxonomies PostTaxonomy[]
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt
  @@unique([taxonomyId, slug])
}

model Post {
  id             String         @id @default(cuid())
  title          String
  slug           String         @unique
  summary        String?
  content        String?
  image          String?
  date           DateTime       @default(now())
  userId         String?
  user           User?          @relation(fields: [userId], references: [id])
  postTaxonomies PostTaxonomy[]
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt
}

model PostTaxonomy {
  postId         String
  taxonomyMetaId String

  post         Post         @relation(fields: [postId], references: [id], onDelete: Cascade)
  taxonomyMeta TaxonomyMeta @relation(fields: [taxonomyMetaId], references: [id], onDelete: Cascade)

  @@id([postId, taxonomyMetaId])
}

model BasicDetails {
  id              String      @id @default(cuid())
  siteName        String?
  tagLine         String?
  profileImage    String?
  aboutMe         String?
  aboutMeImage    String?
  contactEmail    String?
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt
}

model Project {
  id        String    @id @default(cuid())
  title     String
  summary   String
  image     String
  link      String
  skills    Skill[]   @relation("ProjectSkills")
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  
}

model Skill {
  id        String    @id @default(cuid())
  title     String
  summary   String
  image     String
  projects  Project[] @relation("ProjectSkills")
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  
}

